// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package config_store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigStoreClient is the client API for ConfigStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigStoreClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (ConfigStore_StoreClient, error)
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (ConfigStore_SearchClient, error)
}

type configStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigStoreClient(cc grpc.ClientConnInterface) ConfigStoreClient {
	return &configStoreClient{cc}
}

func (c *configStoreClient) Store(ctx context.Context, opts ...grpc.CallOption) (ConfigStore_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigStore_ServiceDesc.Streams[0], "/signal18.config_store.v1.ConfigStore/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &configStoreStoreClient{stream}
	return x, nil
}

type ConfigStore_StoreClient interface {
	Send(*Property) error
	Recv() (*Property, error)
	grpc.ClientStream
}

type configStoreStoreClient struct {
	grpc.ClientStream
}

func (x *configStoreStoreClient) Send(m *Property) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configStoreStoreClient) Recv() (*Property, error) {
	m := new(Property)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configStoreClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (ConfigStore_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigStore_ServiceDesc.Streams[1], "/signal18.config_store.v1.ConfigStore/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &configStoreSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigStore_SearchClient interface {
	Recv() (*Property, error)
	grpc.ClientStream
}

type configStoreSearchClient struct {
	grpc.ClientStream
}

func (x *configStoreSearchClient) Recv() (*Property, error) {
	m := new(Property)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigStoreServer is the server API for ConfigStore service.
// All implementations must embed UnimplementedConfigStoreServer
// for forward compatibility
type ConfigStoreServer interface {
	Store(ConfigStore_StoreServer) error
	Search(*Query, ConfigStore_SearchServer) error
	mustEmbedUnimplementedConfigStoreServer()
}

// UnimplementedConfigStoreServer must be embedded to have forward compatible implementations.
type UnimplementedConfigStoreServer struct {
}

func (UnimplementedConfigStoreServer) Store(ConfigStore_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedConfigStoreServer) Search(*Query, ConfigStore_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedConfigStoreServer) mustEmbedUnimplementedConfigStoreServer() {}

// UnsafeConfigStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigStoreServer will
// result in compilation errors.
type UnsafeConfigStoreServer interface {
	mustEmbedUnimplementedConfigStoreServer()
}

func RegisterConfigStoreServer(s grpc.ServiceRegistrar, srv ConfigStoreServer) {
	s.RegisterService(&ConfigStore_ServiceDesc, srv)
}

func _ConfigStore_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigStoreServer).Store(&configStoreStoreServer{stream})
}

type ConfigStore_StoreServer interface {
	Send(*Property) error
	Recv() (*Property, error)
	grpc.ServerStream
}

type configStoreStoreServer struct {
	grpc.ServerStream
}

func (x *configStoreStoreServer) Send(m *Property) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configStoreStoreServer) Recv() (*Property, error) {
	m := new(Property)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConfigStore_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigStoreServer).Search(m, &configStoreSearchServer{stream})
}

type ConfigStore_SearchServer interface {
	Send(*Property) error
	grpc.ServerStream
}

type configStoreSearchServer struct {
	grpc.ServerStream
}

func (x *configStoreSearchServer) Send(m *Property) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigStore_ServiceDesc is the grpc.ServiceDesc for ConfigStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signal18.config_store.v1.ConfigStore",
	HandlerType: (*ConfigStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _ConfigStore_Store_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _ConfigStore_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}
